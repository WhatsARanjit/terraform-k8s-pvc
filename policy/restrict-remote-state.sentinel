import "tfstate-functions" as state
import "tfrun"

param allowed_workspaces default {
  "dev": ["k8s-cluster", "k8s-pvc_dev"],
  "prod": ["k8s-cluster", "k8s-pvc_prod"],
  "invalid": [],
}

# Get the workspace name from the tfrun import
workspace_name = tfrun.workspace.name

# Determine the workspace environment (key of allowed_workspaces list)
matching_env_found = false
workspace_env = ""
for allowed_workspaces as env, workspaces {
  if workspace_name matches "(.+)_" + env + "$" or
     workspace_name matches "^" + env + "_(.+)$" {
    workspace_env = env
    matching_env_found = true
    break
  }
}

# Deal with workspaces names that do not match patterns
if not matching_env_found {
  workspace_env = "invalid"
}

# Find instances of remote state data sources
remoteStates = state.find_datasources("terraform_remote_state")

# Filter remote state data sources to violations
violatingRemoteStates = state.filter_attribute_not_in_list(remoteStates,
                        "config.workspaces.name",
                        allowed_workspaces[workspace_env], false)

# Determine if there are any violations
validated = true
if length(violatingRemoteStates["messages"]) is not 0 {
  validated = false
  # Special processing for workspace names that do not match an environment
  if workspace_env is "invalid" {
    # delete the "invalid" key from allowed_workspaces to improve message
    delete(allowed_workspaces, "invalid")
    print("The current workspace", workspace_name, "is not allowed to access",
          "remote state from other workspaces because its name does not match",
          "any of the allowed regular expressions in", keys(allowed_workspaces))
  }
  # Print generic violation message
  print("This k8s compute tried to access a storage tier",
        "it is not allowed to access.")
  # Print specific violation messages for instances of the terraform_remote_state
  # data source
  state.print_violations(violatingRemoteStates["messages"], "Storage source")
}

# Main rule
main = rule {
  validated
}
